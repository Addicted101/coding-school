import random

###COMMON CLASS PRACTICE: "Getters and setters"
  #Functions that can change or allow user to view certain attributes of an instance of a class
#GET:
  #Returns the attribute in question. EX:
  #def get_Height(self):
    #return self.height
#SET:
  #Changes the attribute question. EX:
  #def set_Height(self,x):
    #self.height = x

'''
RANDOMNESS EXAMPLE

x = random.uniform(0,10)

if (x > 5):
  Do something
else (x <= 5):
  Do something else

class Car():
  def __init__(self, name):
    self.name = name
    self.year = "1996"
    self.model = "Default"

  def getName(self):
    return self.name

class Honda(Car):
  def __init__(self, name):
    super().__init__(name)
    self.model = "Honda"
  def getModel(self):

    return self.model
'''

#Whenever the enemy or the player has less than or 0 HP, the game should immediately end, telling the user the result, and asking if they'd like to play again.

'''
def attack (class1,class2):

  dodge  = random.uniform(0,100)

  if dodge < class2.SPD:

    print "enemy dodged"

    return 0

  else:

    damage = (whatever formula for damage)

    return damage

(in main)

if user chose to attack:

  damage = attack(class1,class2)

  class2.HP = class2.HP - damage
'''
class template():

  def __init__(self):
    self.HP = 150
    self.ATK = 50
    self.CP = 35
    self.SPD = 20
    self.DEF = 0.1
    self.FAN = 15
    self.AMM = 7
    self.MAXHP = 150
    self.MAXAMM = self.AMM
  def move(self):
    distance = distance - self.SPD
  def attack(self, class2):
    dodge = random.uniform(0,100)
    if dodge < class2.SPD:
      print("dodged the attack")
    else:
      class2.HP = class2.HP - (self.ATK -(self.ATK * class2.DEF))

  def fan(self, class2):
    fan_distance = random.uniform(0,100)
    if distance < fan_distance:
      fann = random.uniform(0,100)
      if fann < self.FAN:
        class2.HP = class2.HP - 149
    else:
      print("fan missed")
    self.AMM = 0

  def SETHP(self, x):
    if x + self.HP <= self.MAXHP:
      self.HP = self.MAXHP
    else:
      self.HP = self.HP + x

  def RELOAD(self,x):
    if x + self.HP >= self.MAXAMM:
      self.AMM = self.MAXAMM
    else:
      self.AMM = self.AMM

class sproing(template):
  def __init__(self):
    super().__init__()
    self.SPD = 65
    self.DEF = 0.15

class meme(template):
  def __init__(self):
    super().__init__()
    self.ATK = 15
    self.CP = 75
    self.FAN = 75
    self.SPD = 35
    self.AMM = 14
    self.DEF = 0.25

class avtoboi(template):
  def __init__(self):
    super().__init__()
    self.ATK = 135
    self.CP = 10
    self.SPD = 10
    self.FAN = 60
    self.AMM = 19

class tryhard(template):
  def __init__(self):
    super().__init__()
    self.ATK = 135
    self.FAN = 35
    self.DEF = 0.15
    self.AMM = 5

###Main

distance = 100
consumable_counter = 0
big_heal_counter = 0
choice = input("choose a class: sproing, meme, avtoboi, or tryhard. the sproing loadout is a speed based loadout capable of doing moderate damage, going extremily fast, low fanning level and is best at medium range. the meme loadout is a low damage loadout, that specializes in the art of rage manipulation this loadout exels at close range due to it's high conumable power and high fanning power. the avtoboi loadout is a tanky loadout. it specializes in medium range but can preform well in close range due to its high fanning level. the final loadout is the tryhard loadout. this loadout is based on long range and strategic positions, this can make them difficult to be hit by enemies.")
if choice == "sproing":
  class1 = sproing()
elif choice == "meme":
  class1 = meme()
elif choice == "avtoboi":
  class1 = avtoboi()
elif choice == "tryhard":
  class1 = tryhard()
enemy_choice = input("choose an enemy class: sproing, meme, avtoboi, or tryhard. the sproing loadout is a speed based loadout capable of doing moderate damage, going extremily fast, low fanning level and is best at medium range. the meme loadout is a low damage loadout, that specializes in the art of rage manipulation this loadout exels at close range due to it's high conumable power and high fanning power. the avtoboi loadout is a tanky loadout. it specializes in medium range but can preform well in close range due to its high fanning level. the final loadout is the tryhard loadout. this loadout is based on long range and strategic positions, this can make it difficult to be hit by enemies.")
difficulty = input("What difficulty woudl you like to play on? easy or hard")
if enemy_choice == "sproing":
  class2 = sproing()
elif enemy_choice == "meme":
  class2 = meme()
elif enemy_choice == "avtoboi":
  class2 = avtoboi()
elif enemy_choice == "tryhard"
print("you are a lonely hunter in the bayous of Luisiana, hired to rid the area of the hell it has become. problem is there are others hired to do the same, so you must rid them aswell.") 
print("your stats are:" + str(class1.HP) + "Hitpoints" + str(class1.ATK) + "Attack" + str(class1.CP) + "consumable power" + str(class1.SPD) + "Speed" + str(class1.DEF) + "defence" + str(class1.FAN) + "fanning power" + str(class1.AMM) + "Ammo capacity")
print("your enemy is" + enemy_choice)
print("their stats are:" + str(class2.HP) + "Hitpoints" + str(class2.ATK) + "Attack" + str(class2.CP) + "consumable power" + str(class2.SPD) + "Speed" + str(class2.DEF) + "defence" + str(class2.FAN) + "fanning power" + str(class2.AMM) + "Ammo capacity")
while class1.HP > 0 and class2.HP > 0
choice = input ("what would you like to do? attack, use a consumable (only able to use 1), fan, move towards enemy, small heal, big heal (only able to use 2), or reload")
if choice = "attack":
  if class1.AMM < 0:
    class1.attack(class2)
    print ("you delt " + str(self.ATK -(self.ATK * class2.DEF)) + " and they now have " + class2.HP + " health")
    class1.AMM = class1.AMM - 1
  else:
    print ("you hear an annoying clicking sound coming from your gun as you try to shoot. ")
elif choice = "consumable":
  consumable = random.uniform(0,100)
  if consumable_counter < 1:
    if consumable < class1.CP
      class2.DEF = class2.DEF / 1.1
      class2.SPD = class2.SPD / 1.1
      consumable_counter = consumable_counter + 1
  else:
    print("you have run out of consumables to use")
elif choice = "move":
  move_distance = input("how far would you like to move (Maximum distance is 25)")
  if move_distance < 25:
    distance = distance - int(move_distance)
  else:
    distance = distance - 25
elif choice = "fan":
  class1.fan(class2)
elif choice = "small heal":
  class1.SETHP(50)
elif choice = "big heal":
  if big_heal_counter < 2:
    class1.SETHP(150)
    big_heal_counter = big_heal_counter + 1
  else:
    print("you have run out of big heals")
elif choice = "reload":
  class1.RELOAD(class1.MAXAMM)
if difficulty = "easy":
  easy_choice = random.uniform(0,100)
if class2.HP > 50:
  easy_heal = random.uniform(0,100)
  if easy_heal 
else:
  if class2.AMM > 0 :
    if easy choice > 50:
      class2.attack(class1)
    else:
      class2.fan(class1)
  else:
    class2.RELOAD
